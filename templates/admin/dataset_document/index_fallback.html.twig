{% extends '@RAGFlowApi/admin/layout.html.twig' %}

{% block title %}{{ dataset.name }} - 文档管理{% endblock %}

{% block content_title %}{{ dataset.name }} - 文档管理{% endblock %}

{% block page_actions %}
    <a href="{{ path('admin_rag_flow_dataset_index') }}" class="btn btn-secondary">
        <i class="fa fa-arrow-left fa-fw"></i> 返回数据集列表
    </a>
{% endblock %}

{% block main %}
    {# 简化的操作栏 #}
    <div class="mb-3">
        <div class="row align-items-center">
            <div class="col-md-6">
                <div class="btn-group" role="group">
                    <a href="{{ path('dataset_documents_upload', {'datasetId': dataset.id}) }}" 
                       class="btn btn-primary">
                        <i class="fa fa-upload fa-fw"></i> 上传文档
                    </a>
                    <button type="button" class="btn btn-secondary" onclick="refreshStatus()">
                        <i class="fa fa-sync fa-fw"></i> 刷新
                    </button>
                    <button type="button" class="btn btn-info" onclick="syncAllChunks()">
                        <i class="fa fa-cloud-download-alt fa-fw"></i> 手动同步分块
                    </button>
                </div>
            </div>
            <div class="col-md-6">
                <div class="row">
                    <div class="col-md-8">
                        <input type="text" class="form-control" placeholder="搜索文档..." 
                               value="{{ filters.name|default('') }}" 
                               id="searchInput">
                    </div>
                    <div class="col-md-4">
                        <select class="form-select" id="statusFilter">
                            <option value="">所有状态</option>
                            <option value="pending" {{ filters.status|default('') == 'pending' ? 'selected' }}>待处理</option>
                            <option value="uploading" {{ filters.status|default('') == 'uploading' ? 'selected' }}>上传中</option>
                            <option value="uploaded" {{ filters.status|default('') == 'uploaded' ? 'selected' }}>已上传</option>
                            <option value="processing" {{ filters.status|default('') == 'processing' ? 'selected' }}>处理中</option>
                            <option value="completed" {{ filters.status|default('') == 'completed' ? 'selected' }}>已完成</option>
                            <option value="failed" {{ filters.status|default('') == 'failed' ? 'selected' }}>失败</option>
                            <option value="sync_failed" {{ filters.status|default('') == 'sync_failed' ? 'selected' }}>同步失败</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
    </div>

    {# 简化的文档列表 #}
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">文档列表 ({{ documents|length }} 个文档)</h5>
        </div>
        <div class="card-body p-0">
            {% if documents|length > 0 %}
            <div class="table-responsive">
                <table class="table table-striped table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>文档名称</th>
                            <th width="80">类型</th>
                            <th width="100">大小</th>
                            <th width="120">状态</th>
                            <th width="80">分块数</th>
                            <th width="130">上传时间</th>
                            <th width="100">操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for document in documents %}
                        <tr class="document-row" data-document-id="{{ document.id }}">
                            <td>
                                <div class="d-flex align-items-center">
                                    {% set icon = 'fa-file' %}
                                    {% if document.type in ['pdf'] %}
                                        {% set icon = 'fa-file-pdf text-danger' %}
                                    {% elseif document.type in ['doc', 'docx'] %}
                                        {% set icon = 'fa-file-word text-primary' %}
                                    {% elseif document.type in ['xls', 'xlsx'] %}
                                        {% set icon = 'fa-file-excel text-success' %}
                                    {% elseif document.type in ['ppt', 'pptx'] %}
                                        {% set icon = 'fa-file-powerpoint text-warning' %}
                                    {% elseif document.type in ['txt', 'md'] %}
                                        {% set icon = 'fa-file-alt' %}
                                    {% elseif document.type in ['jpg', 'jpeg', 'png', 'gif'] %}
                                        {% set icon = 'fa-file-image text-info' %}
                                    {% endif %}
                                    <i class="far {{ icon }} fa-fw me-2"></i>
                                    <div>
                                        <div class="fw-bold">{{ document.name }}</div>
                                        <small class="text-muted">{{ document.filename }}</small>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <span class="badge bg-light text-dark">{{ document.type|upper }}</span>
                            </td>
                            <td>
                                {% if document.size %}
                                    {{ (document.size / 1024 / 1024) | number_format(2) }} MB
                                {% else %}
                                    -
                                {% endif %}
                            </td>
                            <td>
                                {% set status_class = 'secondary' %}
                                {% set status_text = document.status %}
                                {% if document.status == 'completed' %}
                                    {% set status_class = 'success' %}
                                    {% set status_text = '已完成' %}
                                {% elseif document.status == 'uploaded' %}
                                    {% set status_class = 'info' %}
                                    {% set status_text = '已上传' %}
                                {% elseif document.status == 'processing' %}
                                    {% set status_class = 'warning' %}
                                    {% set status_text = '处理中' %}
                                {% elseif document.status == 'uploading' %}
                                    {% set status_class = 'warning' %}
                                    {% set status_text = '上传中' %}
                                {% elseif document.status == 'failed' %}
                                    {% set status_class = 'danger' %}
                                    {% set status_text = '失败' %}
                                {% elseif document.status == 'sync_failed' %}
                                    {% set status_class = 'danger' %}
                                    {% set status_text = '同步失败' %}
                                {% elseif document.status == 'pending' %}
                                    {% set status_class = 'secondary' %}
                                    {% set status_text = '待处理' %}
                                {% endif %}
                                <span class="badge bg-{{ status_class }}">{{ status_text }}</span>
                            </td>
                            <td class="text-center">
                                {% if document.chunkCount %}
                                    <span class="badge bg-info">{{ document.chunkCount }}</span>
                                {% else %}
                                    <small class="text-muted">-</small>
                                {% endif %}
                            </td>
                            <td>
                                <small>{{ document.createTime|date('m-d H:i') }}</small>
                            </td>
                            <td>
                                {% if document.status in ['failed', 'sync_failed'] or not document.remoteId or document.remoteId == '0' %}
                                <button type="button" class="btn btn-outline-warning btn-sm" 
                                        onclick="retryDocument({{ document.id }})" title="重新上传">
                                    <i class="fa fa-redo"></i>
                                </button>
                                {% endif %}
                                {% if document.status != 'processing' %}
                                <button type="button" class="btn btn-outline-danger btn-sm" 
                                        onclick="deleteDocument({{ document.id }})" title="删除">
                                    <i class="fa fa-trash"></i>
                                </button>
                                {% endif %}
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
            {% else %}
            <div class="text-center py-5">
                <i class="fa fa-folder-open fa-3x text-muted mb-3"></i>
                <h5 class="text-muted">暂无文档</h5>
                <p class="text-muted">点击上方的"上传文档"按钮添加文档到此数据集</p>
                <a href="{{ path('dataset_documents_upload', {'datasetId': dataset.id}) }}" 
                   class="btn btn-primary">
                    <i class="fa fa-upload fa-fw"></i> 上传文档
                </a>
            </div>
            {% endif %}
        </div>
        
        {# 分页 #}
        {% if pagination.totalPages > 1 %}
        <div class="card-footer">
            <nav aria-label="文档列表分页">
                <ul class="pagination mb-0">
                    <li class="page-item {{ pagination.page <= 1 ? 'disabled' }}">
                        <a class="page-link" href="{{ path('dataset_documents_index', {'datasetId': dataset.id, 'page': pagination.page - 1}) }}">上一页</a>
                    </li>
                    
                    {% for page in 1..pagination.totalPages %}
                        {% if page == pagination.page %}
                        <li class="page-item active">
                            <span class="page-link">{{ page }}</span>
                        </li>
                        {% else %}
                        <li class="page-item">
                            <a class="page-link" href="{{ path('dataset_documents_index', {'datasetId': dataset.id, 'page': page}) }}">{{ page }}</a>
                        </li>
                        {% endif %}
                    {% endfor %}
                    
                    <li class="page-item {{ pagination.page >= pagination.totalPages ? 'disabled' }}">
                        <a class="page-link" href="{{ path('dataset_documents_index', {'datasetId': dataset.id, 'page': pagination.page + 1}) }}">下一页</a>
                    </li>
                </ul>
            </nav>
            <div class="text-muted small mt-2">
                显示第 {{ (pagination.page - 1) * pagination.limit + 1 }} - {{ min(pagination.page * pagination.limit, pagination.total) }} 条，共 {{ pagination.total }} 条记录
            </div>
        </div>
        {% endif %}
    </div>

    <script>
        // 搜索功能
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                const url = new URL(window.location);
                url.searchParams.set('name', this.value);
                url.searchParams.set('page', '1');
                window.location.href = url.toString();
            }
        });

        // 状态筛选
        document.getElementById('statusFilter').addEventListener('change', function() {
            const url = new URL(window.location);
            if (this.value) {
                url.searchParams.set('status', this.value);
            } else {
                url.searchParams.delete('status');
            }
            url.searchParams.set('page', '1');
            window.location.href = url.toString();
        });

        // 刷新状态
        function refreshStatus() {
            window.location.reload();
        }

        // 重新上传文档
        function retryDocument(id) {
            if (!confirm('确认重新上传此文档吗？')) {
                return;
            }

            // 显示加载状态
            const retryBtn = event.target.closest('button');
            const originalHTML = retryBtn.innerHTML;
            retryBtn.innerHTML = '<i class="fa fa-spinner fa-spin"></i>';
            retryBtn.disabled = true;
            
            const url = '{{ path('dataset_documents_retry', {'datasetId': dataset.id, 'documentId': '__DOCUMENT_ID__'}) }}';
            const actualUrl = url.replace('__DOCUMENT_ID__', id);
            
            fetch(actualUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(data.message || '文档重传成功', 'success');
                    // 延迟刷新页面以显示更新后的状态
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                } else {
                    showAlert(data.error || '重传失败', 'danger');
                    retryBtn.innerHTML = originalHTML;
                    retryBtn.disabled = false;
                }
            })
            .catch(error => {
                console.error('重传请求失败:', error);
                showAlert('网络错误，重传失败', 'danger');
                retryBtn.innerHTML = originalHTML;
                retryBtn.disabled = false;
            });
        }

        // 重新解析文档
        function reparseDocument(id) {
            if (!confirm('确认重新解析此文档吗？')) {
                return;
            }

            fetch(`{{ path('dataset_documents_reparse', {'datasetId': dataset.id, 'documentId': '__ID__'}) }}`.replace('__ID__', id), {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('重新解析任务已启动');
                    window.location.reload();
                } else {
                    alert('重新解析失败: ' + data.error);
                }
            })
            .catch(error => {
                console.error('重新解析请求失败:', error);
                alert('重新解析请求失败，请稍后重试');
            });
        }

        // 停止解析文档
        function stopParsing(id) {
            if (!confirm('确认停止解析此文档吗？')) {
                return;
            }

            fetch(`{{ path('dataset_documents_stop_parsing', {'datasetId': dataset.id, 'documentId': '__ID__'}) }}`.replace('__ID__', id), {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('解析任务已停止');
                    window.location.reload();
                } else {
                    alert('停止解析失败: ' + data.error);
                }
            })
            .catch(error => {
                console.error('停止解析请求失败:', error);
                alert('停止解析请求失败，请稍后重试');
            });
        }

        // 同步chunks数据
        function syncChunks(id) {
            if (!confirm('确认同步此文档的分块数据吗？')) {
                return;
            }

            // 显示加载状态
            const syncBtn = event.target.closest('button');
            const originalHTML = syncBtn.innerHTML;
            syncBtn.innerHTML = '<i class="fa fa-spinner fa-spin fa-xs"></i>';
            syncBtn.disabled = true;

            fetch(`{{ path('dataset_documents_sync_chunks', {'datasetId': dataset.id, 'documentId': '__ID__'}) }}`.replace('__ID__', id), {
                method: 'POST'
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert(`成功同步 ${data.synced} 个分块`, 'success');
                    // 延迟刷新页面以显示更新后的分块数
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    showAlert(data.error || '同步分块失败', 'danger');
                    syncBtn.innerHTML = originalHTML;
                    syncBtn.disabled = false;
                }
            })
            .catch(error => {
                console.error('同步分块请求失败:', error);
                showAlert('网络错误，同步分块失败', 'danger');
                syncBtn.innerHTML = originalHTML;
                syncBtn.disabled = false;
            });
        }

        // 自动更新解析进度
        function updateProgress() {
            const progressRows = document.querySelectorAll('.document-row');
            const progressPromises = [];

            progressRows.forEach(row => {
                const documentId = row.dataset.documentId;
                const progressBar = row.querySelector('.progress-bar');
                const progressText = row.querySelector('.progress-text');
                
                // 只更新正在处理中的文档
                if (progressBar && progressBar.classList.contains('progress-bar-animated')) {
                    const promise = fetch(`{{ path('dataset_documents_parse_status', {'datasetId': dataset.id, 'documentId': '__DOC_ID__'}) }}`.replace('__DOC_ID__', documentId))
                        .then(response => response.json())
                        .then(data => {
                            if (!data.error) {
                                updateDocumentProgress(row, data);
                            }
                        })
                        .catch(error => console.error('Progress update failed:', error));
                    
                    progressPromises.push(promise);
                }
            });

            return Promise.all(progressPromises);
        }

        // 更新单个文档的进度显示
        function updateDocumentProgress(row, data) {
            const progressBar = row.querySelector('.progress-bar');
            const progressText = row.querySelector('.progress-text');
            
            // 将进度值转换为百分比 (1 = 100%)
            const progressPercent = Math.round(data.progress * 100);
            
            if (progressBar) {
                progressBar.style.width = progressPercent + '%';
                progressBar.setAttribute('title', `进度: ${progressPercent}%`);
                
                // 根据进度更新样式
                progressBar.classList.remove('bg-info', 'bg-success', 'progress-bar-animated');
                if (progressPercent >= 100) {
                    progressBar.classList.add('bg-success');
                } else {
                    progressBar.classList.add('bg-info', 'progress-bar-animated');
                }
            }

            if (progressText) {
                progressText.textContent = `${progressPercent}%`;
            }

            // 如果完成了，可以移除动画效果并刷新页面状态
            if (progressPercent >= 100 && progressBar && progressBar.classList.contains('progress-bar-animated')) {
                setTimeout(() => window.location.reload(), 2000);
            }
        }

        // 启动进度更新定时器（每5秒检查一次）
        let progressInterval;
        function startProgressMonitoring() {
            progressInterval = setInterval(updateProgress, 5000);
        }

        function stopProgressMonitoring() {
            if (progressInterval) {
                clearInterval(progressInterval);
            }
        }

        // 页面加载完成后启动监控
        document.addEventListener('DOMContentLoaded', function() {
            startProgressMonitoring();
            
            // 页面隐藏时停止监控，显示时重新启动
            document.addEventListener('visibilitychange', function() {
                if (document.hidden) {
                    stopProgressMonitoring();
                } else {
                    startProgressMonitoring();
                }
            });
        });

        // 删除单个文档
        function deleteDocument(id) {
            if (!confirm('确认删除此文档吗？此操作不可撤销。')) {
                return;
            }

            fetch(`{{ path('dataset_documents_delete', {'datasetId': dataset.id, 'documentId': '__ID__'}) }}`.replace('__ID__', id), {
                method: 'POST'
            })
            .then(response => {
                if (response.ok) {
                    window.location.reload();
                } else {
                    alert('删除失败，请稍后重试');
                }
            })
            .catch(error => {
                console.error('删除请求失败:', error);
                alert('删除请求失败，请稍后重试');
            });
        }
    </script>

    <script>
        // 显示警告消息
        function showAlert(message, type = 'info') {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            
            // 插入到页面顶部
            const container = document.querySelector('.main-content') || document.body;
            container.insertBefore(alertDiv, container.firstChild);
            
            // 3秒后自动消失
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 3000);
        }

        // 手动同步分块
        function syncAllChunks() {
            if (!confirm('确认同步所有已完成文档的分块数据吗？')) {
                return;
            }

            const btn = event.target.closest('button');
            const originalHTML = btn.innerHTML;
            btn.innerHTML = '<i class="fa fa-spinner fa-spin"></i> 同步中...';
            btn.disabled = true;

            fetch('{{ path("dataset_documents_sync_all_chunks", {"datasetId": dataset.id}) }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(`同步成功！共同步 ${data.synced_count} 个文档的分块数据。`);
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                } else {
                    alert(data.error || '同步失败');
                    btn.innerHTML = originalHTML;
                    btn.disabled = false;
                }
            })
            .catch(error => {
                console.error('同步请求失败:', error);
                alert('网络错误，同步失败');
                btn.innerHTML = originalHTML;
                btn.disabled = false;
            });
        }
    </script>
{% endblock %}